import requests
import re
import urllib.parse
from bs4 import BeautifulSoup

class Scanner:
    def __init__(self, target_url, ignore_links):
        self.session = requests.Session()
        self.target_url = target_url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src='x' onerror='alert(\"XSS\")'>",
            "javascript:alert('XSS')"
        ]

    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall(b'(?:href=")(.*?)"', response.content)

    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)

        for link in href_links:
            link = urllib.parse.urljoin(str(url), str(link))
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, "html.parser")
        return parsed_html.findAll("form")

    def submit_form(self, form, payload, url):
        action = form.get("action")
        post_url = urllib.parse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}

        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            if input_type != "submit":
                post_data[input_name] = payload

        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        vulnerable_links = []
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                for payload in self.xss_payloads:
                    if self.test_xss_in_form(form, payload, link):
                        vulnerable_links.append(link)
                        break

            if "=" in link:
                for payload in self.xss_payloads:
                    if self.test_xss_in_link(link, payload):
                        vulnerable_links.append(link)
                        break

        if vulnerable_links:
            print("XSS vulnerabilities found:")
            for link in vulnerable_links:
                print(link)
        else:
            print("No XSS vulnerabilities found.")

    def test_xss_in_link(self, url, payload):
        url = url.replace("=", "=" + urllib.parse.quote_plus(payload))
        response = self.session.get(url)
        return payload in response.content.decode()

    def test_xss_in_form(self, form, payload, url):
        response = self.submit_form(form, payload, url)
        return payload in response.content.decode()


# Example usage:
target_url = "http://127.0.0.1/dvwa/"
links_to_ignore = ["http://127.0.0.1/dvwa/logout.php"]

vuln_scanner = Scanner(target_url, links_to_ignore)
vuln_scanner.crawl()
vuln_scanner.run_scanner()

